/****************************************\
|*	Interacting with the Interface      *|
|*	Written by Danny Burrows            *|
|*	burrows.danny@gmail.com             *|
|*	CS419 - Spring 2014                 *|
|*	Group Project                       *|
|*	04/14/2014                          *|
|*	                                    *|
|*	Documentation for interface.py      *|
|*	which uses calendarAPI.py and       *|
|*	timemanip.py.                       *|
\****************************************/

*Seeing as I have made significant headway, without a lot of sharing code, I figured I needed to bring everyone up to speed with my progress. This short document attempts to highlight the important features and methods in which to call and interact with the various objects that have been created. Realistically speaking, this is most of the back end of the project. We should take same time and test things thoroughly, as I have spot tested to ensure everything is working. I would like to update this and make sure that it is user friendly and that you have no problems using the libraries so far.*

/*************************************************************\
|* Finding times when one user is available, across a window *|
\*************************************************************/

Requirement 1 of the project assignment states "Given a single username in the local domain, provide a list of open times within the window specified if no window is specified, use a sane default (7 days, 8AM-6PM)". The process can be broken down into the following steps:

Objects:
service(), person(), window()

Function calls:
person().addClassTimeBlock(), window().printWindow()
[see API documentation for parameters]

Steps:

1) Create a Google Calendar API service object: service = connection().
2) Get the length of the meeting.
3) Get the start and stop date/times; specifically in the format 'MM/DD/YYYY HH:MM'.
4) Create a new person, passing in the user name (which is the name of their google calendar), the lengh of the meeting and service.service (which allows connection to the Calendar API)
5) Next, determine if the user is in the database with classes to teach.
5a) If in the database, query the days the user is teaching the class(es) and the start and stop times of the class(es).
5b) Pass the days as the day of the week as a string ("135" for M W F [0 is Sun, 6 is Sat]).
5c) Pass the times as a string in the format "HH:MM:SS". Append seconds to the string via a normal concatenation if needed
5d) Determine the window in which the user is being tested; if not window is set, manually set the start and stop days for current day to (current day + 1 week)
5d1) This can be done via: start = datetime.now(), end = start + timedelta(days=7); start = getStringDate(start), end = getStringDate(end)
5e) Call addClassTimeBlock(), passing in the class days, the class start and stop TIMES, and the start and stop DATES being queried.
6) Now that classes have been added to the blocked times, create a new window() object.
7) Create the object via: newWindow = window(user, <start>, <stop>), <start> and <stop> are optional. If passed in they must be in the format 'MM/DD/YYYY HH:MM'
8) Display the window via newWindow.printWindow()

Notes:

a) Currently, the display function only prints in a generic list the available window. This can be modified to anything at a later time. To access available times, the array can be accessed
directly via: window.availableDates, which contains a list of dates determined that the user is available.
b) If the user has a different user name in the database than their google calendar, then two different user objects will have to be created and the results will not work properly.
This will require a significant rewrite and is something we need to update on our assumptions.

/*********************************************************\
|* Find users that available over a short period of time *|
\*********************************************************/

Requirement 2 of the project assignment states 'Given a specific time window and a list of usernames, list all users available for the entire duration. This is more in the nature of "who can i expect at the meeting"'. The process can be broken down into the following steps:

Objects:
service(), person(), meeting()

Function calls:
meeting().availInTimeSlot(), meeting().printAvailUsers()

Steps:

1) Create a Google Calendar API service object: service = connection().
2) Get the length of the meeting.
3) Get the start and stop date/times; specifically in the format 'MM/DD/YYYY HH:MM'.
4) Create an empty array to hold all the user objects.
5) Create a new person, passing in the user name (which is the name of their google calendar), the lengh of the meeting and service.service (which allows connection to the Calendar API).
   Append to user array
5a) Repeat for each user.
6) For each user, determine if the user is in the database with classes to teach.
6a) See Step 5 in the first requirement for how to add these times.
7) Create a new meeting() object: newMeeting = meeting(<start>, <stop>, <length>, <users>). No optional parameters on this one. Users expects an array, do not pass just one user, pass in 
   an array with one entity.
8) On instantiation, the meeting object will find availabilities and list them in availableTimes.
9) Call meeting().availInTimeSlot(), which will trim and find which users are available in the time slot for the entire time slot.
10) Call meeting().printAvailUsers() to get a listing of the users.

Notes:

a) Same with the first, the user names for classes and the google calendar must match or the logic falls apart.
b) Similar to the first functionality, the printing is just a list. Users are held in the array availUsers, inside the meeting object.
c) I/We can add a method to determine meeting length from the passed in start and stop times. This can be done use the timemanip.py file via getTotalMins(hours, mins). Low priority.
d) This expects the start and stop DATES to be the same day. 

/**********************************************\
|* Find all timeslots all users are available *|
\**********************************************/

Requirement 3 of the project assignment states 'Given a more broad window and a list of usernames, provide all time periods where all are available. This is more in the nature of "when can I schedule the meeting?"'. This was my favorite and first one to write. The process can be broken down into the following steps:

Objects:
service(), person(), meeting()

Function calls:
meeting().listAvailTimes()

Steps:
1) Create the users and meeting object using steps 1-7 from the second requirement.
2) Call meeting().listAvailTimes() to list the time available.

Notes:

a) Same with the first and the second, the user names for classes and the google calendar must match or the logic falls apart.
b) We can directly access the available times via meeting().availableTimes, which is a list, and can display them in any manner necessary.